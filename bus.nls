breed [buses bus]

breed [seats seat]

seats-own [
    xDir
    yDir
]

buses-own [
    bus_state
    stop_duration ; in minutes
    b_w ; bus width
    b_h ; bus height 
    departed ; departed time in ticks
    max_capacity ; natural max capacity
    n_people ; people in the bus
    stop_mu ; the mean for a normal distribution for the current stop
    n_RNA ; amount of infected particles
    alreadySpread? ; for handling animation 
    n_stops ; amount of visited bus stops
]


; Function that will decide how many people leave and enter at a given stop
; Each stop uses it's own mean for the distribution
to-report sample_people
    report random-normal stop_mu 3
end

; Set the mean for the next stop distribution
; Also generate the duraton of the next stop
to init_stop 
    set n_stops n_stops + 1
    set stop_duration sample_stop_duration
    set stop_mu sample_stop_importance_mu
end

; Spawn people at doors
to spawn_people [ n ] 
    let doors [ self ] of patches with [ pcolor = door_color ]
    let nDoors length doors
    let cDoor nobody
    let peoplePerDoor floor (n / nDoors)
    let i 0
    
    ; Check if there is a sufficient amount of people per door
    if (n / nDoors) <= 0.5 and (n / nDoors) > 0 [
        set cDoor item (random nDoors) doors
        let xDoor [ pxcor ] of cDoor
        let yDoor [ pycor ] of cDoor
        hatch-people n [
            init_person xDoor yDoor
        ]
        set n_people n_people + n
        stop
    ]
    
    ; If there is spawn some people at each door
    repeat nDoors [
        set cDoor item i doors
        let xDoor [ pxcor ] of cDoor
        let yDoor [ pycor ] of cDoor
        hatch-people peoplePerDoor [
            init_person xDoor yDoor
        ]
        set i i + 1
    ]
    
    set n_people n_people + ( peoplePerDoor * nDoors )
    
  
end

; Ventilation, virus lifetime and production from infected people
to adjustRNA

  let minutes stop_duration
  let n n_RNA
  ; Ventilation code
  
  debug "Pice1" ventilationAndLifeTime n minutes 
   
  set n ventilationAndLifeTime n (minutes / 2)
  set n ventilationAndLifeTime n (minutes / 2)
  debug "Pice2" n
  
  set n_RNA ventilationAndLifeTime n_RNA minutes
  
   
  ; Infected poeple production of RNA code
  
  ask people with [ person_state = state_infected ] [
    releaseRNA minutes
  ]
  
end

; Adjust the number of infected particles and also infect other people
to update_infections
  adjustRNA
  
  let minutes stop_duration
  
  ask people with [ person_state = state_susceptible ] [
    infect minutes
  ]
end

to bus_tick 
   
   ; Check if the bus reached the goal amount of stops
   if n_stops = journey-stops-amount and journey-stops-amount != 0 [
    set g_stop? true   
    stop
   ]
   
    ; Spawn people and send them to their position
    if bus_state = state_spawn [
             
        let nPeople sample_people
        
        ; Check the people natural capacity
        if (n_people + nPeople) > max_capacity [
            set nPeople max_capacity - n_people
        ]
        
        ; Check the people artificial capacity
        if (n_people + nPeople) > bus-capacity [
            set nPeople bus-capacity - n_people
        ]
        
        spawn_people nPeople
        set bus_state state_boarding
    ]

    ; Wait until all people arrive at their position
    if bus_state = state_boarding [
        if all? people [ moving? = false ] [
            set alreadySpread? false
            set bus_state state_traveling
            set departed ticks
        ]
    ]

    ; Wait journey-animation-duration amount of ticks and in the middle of the animation
    ; update the infections
    if bus_state = state_traveling [
        
        let passed ticks - departed
        let animationTrigger round (journey-animation-duration / 2) 
        
        ; Check if there is enough ticks for the animation to happen
        ifelse animationTrigger < 2 and not alreadySpread? [
            ; If no just update the infections now
            update_infections
            set alreadySpread? true
        ] [
            ; If yes then wait till the middle of the animation
            if passed = animationTrigger [
                update_infections
            ]
        ]
    
        if passed >= journey-animation-duration [
            set bus_state state_leaving
        ]
        
    ]

    ; Order people to leave the bus
    if bus_state = state_leaving [
        set time time + stop_duration
        init_stop ; also initialize new stop normal distribution
        
        let nPeople sample_people
        
        if nPeople > n_people [
          set nPeople n_people
        ]
        
        
        ask n-of nPeople people [
            leave_bus
        ]
        
        set bus_state state_repeat
        
    ]
    
    ; Wait for the pople to leave
    if bus_state = state_repeat [
         if  all? people [ moving? = false ] [
             set n_people count people
             set bus_state state_spawn
         ]
    ]
end

; Function that reads the bus map file and draws the bus
to setup_bus

    set busX 0
    set busY 0

    ; Firstly we need to acquire the dimensions of the bus
    file-open "map.bus"
    while [not file-at-end?]
    [
        let line file-read-line
        set busX length line
        set busY busY + 1
    ]
    file-close
    
    set width busX + (offset * 2)
    set height busY + (offset * 2)

    let xSize (width / 2)
    let ySize (height / 2)
    
    ; Resize the amounf of patches
    resize-world (- xSize) (xSize) (- ySize) (ySize)
    
    create-buses 1 [
        set bus_state state_spawn
        set shape "invisible"
        set n_people 0
    ]
    
    ; Set the global variable of the bus
    set g_bus one-of buses
    
    ask g_bus [
      init_stop
      set b_w busX
      set b_h busY
      set n_stops 0
    ]

    ; Now draw the bus actually
    let y 0
    let tX 0
    let tY 0
    file-open "map.bus"
    while [not file-at-end?]
    [
        let x 0
        let line file-read-line
        repeat (length line) [
            let character item x line
            set tX mapX x
            set tY mapY y
        
            if character = "#" [
                place_wall tX tY
            ]
            if character = "D" [
                place_door tX tY
            ]
            if character = " " [
                place_floor tX tY
            ]
            if character = "V" [
                place_seat tX tY 0 -1
            ]
            if character = "^" [
                place_seat tX tY 0 1
            ]
            if character = ">" [
                place_seat tX tY 1 0
            ]
            if character = "<" [
                place_seat tX tY -1 0
            ]
            if character = "G" [
                place_glass tX tY
            ]
            if character = "X" [
                place_barrier tX tY
            ]
        
            set x x + 1
        ]

        set y y + 1
    ]
    file-close
    
    ; Calculate the natural bus capacity
    let nSeats count seats
    let nFloor count patches with [ pcolor = floor_color ]
    ask g_bus [
        set max_capacity nFloor + nSeats
    ]
    
end

; Function that determines the stops normal distributions (also a normal distribution)
; This function generates the mean for the stops normal distributions
to-report sample_stop_importance_mu
    let importance-mu random-normal bus-stop-importance-mu bus-stop-importance-sd
    report importance-mu
end

; This function determines the the stop duration (in minutes)
to-report sample_stop_duration
    report random-normal bus-stop-duration-mu bus-stop-duration-sd
end 

to place_wall [x y]
    ask patch x y [
        set pcolor wall_color
    ]
end

to place_floor [x y]
  
  ask patch x y [
    set pcolor floor_color
  ]
end

to place_door [x y]
    ask patch x y [
        set pcolor door_color
    ]
end

to place_barrier [x y]
    ask patch x y [
        set pcolor barrier_color
    ]
end

to place_glass [x y]
    ask patch x y [
        set pcolor glass_color
    ]
end

to place_seat [x y xDirection yDirection]
    ask patch x y [
        set pcolor seat_color
    ]

    create-seats 1 [
        set shape "seat"
        set xcor x
        set ycor y
        set size 1.1
        facexy (x + xDirection) (y + yDirection)
        set xDir xDirection
        set yDir yDirection
    ]
end

to-report state_spawn
    report 0
end

to-report state_boarding
    report 1
end

to-report state_traveling
    report 2
end

to-report state_leaving
    report 3
end

to-report state_repeat
    report 4
end

to-report wall_color
    report [250 40 4]
end

to-report floor_color
    report [120 120 120]
end

to-report door_color
    report [66 6 54]
end

to-report seat_color
    report [2 1 1]
end

to-report glass_color
    report [3 252 248]
end

to-report barrier_color
    report [255 251 0]
end
